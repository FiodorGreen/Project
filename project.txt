square := proc (n) local i, a; a := []; 
for i to n do a := [op(a), 1] end do; 
for i to n do a := [op(a), 2] end do; 
for i to n do a := [op(a), 3] end do; 
for i to n do a := [op(a), 4] end do; 
RETURN(a) end proc

nxt := proc () local n, i1, i2, i3, i4, i, j, j1, temp, q; global aa;
n := (1/4)*nops(aa); i := 4*n-1; q := 0; 
while 2 < i and aa[i] <= aa[i-1] do
 i := i-1 end do; 
if i = 2 then q := 1 end if; 
if q = 0 then j1 := i; 
i1 := aa[i]; 
for j from i to 4*n-1 do if aa[i-1] < aa[j] and aa[j] < i1 then i1 := aa[j]; 
j1 := j end if end do; 
aa[j1] := aa[i-1]; 
aa[i-1] := i1; 
i1 := 0; i2 := 0; i3 := 0; i4 := 0; 
for j from i to 4*n-1 do if aa[j] = 1 then i1 := i1+1 end if; 
if aa[j] = 2 then i2 := i2+1 end if; 
if aa[j] = 3 then i3 := i3+1 end if; 
if aa[j] = 4 then i4 := i4+1 end if end do; 
for j from i to i+i1-1 do aa[j] := 1 end do; 
for j from i+i1 to i2+i1+i-1 do aa[j] := 2 end do; 
for j from i+i1+i2 to i3+i2+i1+i-1 do aa[j] := 3 end do; 
for j from i+i1+i2+i3 to 4*n-1 do aa[j] := 4 end do end if; 
RETURN(q) end proc

test := proc () local i, i1, i2, i3, i4, j, n, A, p, b; global aa; 
n := (1/4)*nops(aa); A := array(0 .. n, -n .. n); 
for i from 0 to n do for j from -n to n do A[i, j] := 0 end do end do; 
p := [0, 0]; b := 0; i := 1; 
while b = 0 and i <= 4*n do if aa[i] = 1 then p[1] := p[1]+1 end if; 
if aa[i] = 2 then p[2] := p[2]+1 end if; 
if aa[i] = 3 then p[1] := p[1]-1 end if; 
if aa[i] = 4 then p[2] := p[2]-1 end if; 
if p[2] < 0 then b := 1 end if; 
if b = 0 then if p[2] = 0 and p[1] < 0 then b := 1 end if; 
if A[n-p[2], p[1]] = 1 then b := 1 end if; 
if b = 0 then A[n-p[2], p[1]] := 1; i := i+1 end if end if end do; 
if b = 1 then i1 := 0; i2 := 0; i3 := 0; i4 := 0; 
for j from i+1 to 4*n-1 do if aa[j] = 1 then i1 := i1+1 end if; 
if aa[j] = 2 then i2 := i2+1 end if; 
if aa[j] = 3 then i3 := i3+1 end if; 
if aa[j] = 4 then i4 := i4+1 end if end do;
for j from i+1 to i+i4 do aa[j] := 4 end do; 
for j from i+i4+1 to i+i4+i3 do aa[j] := 3 end do; 
for j from i+i4+i3+1 to i+i4+i3+i2 do aa[j] := 2 end do; 
for j from i+i4+i3+i2+1 to 4*n-1 do aa[j] := 1 end do end if; 
RETURN(b) end proc

count := proc () local t, b, c; global aa; 
b := 0; t := 0; 
while b = 0 do c := test(); 
if c = 0 then t := t+1 end if; 
b := nxt() end do; 
print(t) end proc
